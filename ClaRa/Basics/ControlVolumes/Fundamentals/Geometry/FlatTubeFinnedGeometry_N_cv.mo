within ClaRa.Basics.ControlVolumes.Fundamentals.Geometry;
model FlatTubeFinnedGeometry_N_cv "Discretized flatTubeFinned || Tube type"
//__________________________________________________________________________//
// Component of the ClaRa library, version: 1.8.0                           //
//                                                                          //
// Licensed by the ClaRa development team under the 3-clause BSD License.   //
// Copyright  2013-2022, ClaRa development team.                            //
//                                                                          //
// The ClaRa development team consists of the following partners:           //
// TLK-Thermo GmbH (Braunschweig, Germany),                                 //
// XRG Simulation GmbH (Hamburg, Germany).                                  //
//__________________________________________________________________________//
// Contents published in ClaRa have been contributed by different authors   //
// and institutions. Please see model documentation for detailed information//
// on original authorship and copyrights.                                   //
//__________________________________________________________________________//

  //NOTE: this geometry can not be filled as the applying models assume good mixure of phases and no phase separation

  extends ClaRa.Basics.ControlVolumes.Fundamentals.Geometry.TubeType;
  extends ClaRa.Basics.ControlVolumes.Fundamentals.Geometry.GenericGeometry_N_cv(
    final volume={A_cross[i]*Delta_x[i] for i in 1:N_cv},
    final N_heat = 1,
    final A_heat = [{(A_f + A_ts)/(length*N_passes)*Delta_x[i] for i in 1:N_cv}],
    final A_cross=ones(N_cv)*heigth*width*(l_f-s_f)*(t_f-s_f)/((l_f+diameter_t)*t_f)/N_passes,
    Delta_x=ClaRa.Basics.Functions.GenerateGrid({0}, length*N_passes, N_cv),
    final z=cat(1,
               {(z_out - z_in)/(length*N_passes)*Delta_x[1]/2 + z_in},
               {((z_out - z_in)/(length*N_passes)*(sum(Delta_x[k] for k in 1:i - 1) + Delta_x[i]/2) + z_in) for i in 2:N_cv}),
    final Delta_z_in = {sum(Delta_x[1:i]) - Delta_x[i]/2 for i in 1:N_cv},
    final diameter_hyd={4*A_cross[i]*Delta_x[i]/A_heat[i,N_heat] for i in 1:N_cv});//fill(2*h_f*t_f/(h_f + t_f), N_cv));

  parameter ClaRa.Basics.Units.Length heigth=1 "Height of HX" annotation (Dialog(group="Essential Geometry Definition"));
  parameter ClaRa.Basics.Units.Length width=1 "Width of HX (length of flat tube)" annotation (Dialog(group="Essential Geometry Definition"));
  parameter ClaRa.Basics.Units.Length length=1 "Length of HX (width of flat tube)" annotation (Dialog(group="Essential Geometry Definition"));
  parameter ClaRa.Basics.Units.Length diameter_t=0.01 "Outer diameter of the flat tube" annotation (Dialog(group="Essential Geometry Definition"));
  parameter Integer N_tubes=1 "Number of tubes in parallel (one pass)"
                                                                      annotation(Dialog(group="Essential Geometry Definition"));
  parameter Integer N_passes=1 "Number of passes of the tubes" annotation(Dialog(group="Essential Geometry Definition"));
  parameter Integer flowOrientation=0 "Flow orientation" annotation (Dialog(group="Essential Geometry Definition"), choices(
    choice=0 "Lengthwise",
    choice=1 "Widthwise"));

  parameter ClaRa.Basics.Units.Length h_f=0.01 "Fin heigth" annotation (Dialog(group="Essential Geometry Definition"));
  parameter ClaRa.Basics.Units.Length s_f=0.002 "Fin thickness" annotation (Dialog(group="Essential Geometry Definition"));
  parameter ClaRa.Basics.Units.Length t_f=0.001 "Fin spacing" annotation (Dialog(group="Essential Geometry Definition"));
  parameter ClaRa.Basics.Units.Length l_l=0.8*h_f "Length of one louver" annotation (Dialog(group="Essential Geometry Definition"));
  parameter ClaRa.Basics.Units.Length t_l=0.001 "Louver spacing" annotation (Dialog(group="Essential Geometry Definition"));
  parameter Real Phi(min=0) = 45 "Louver angle" annotation (Dialog(group="Essential Geometry Definition"));

  final parameter ClaRa.Basics.Units.Length l_f=sqrt(h_f^2 + t_f^2) "Fin length" annotation (Dialog(group="Essential Geometry Definition"));
//   final parameter ClaRa.Basics.Units.Length length_plate=if flowOrientation==0 then length else width "Axial length (legth of plate or fin in flow direction)" annotation (Dialog(group="Essential Geometry Definition"));
//   final parameter ClaRa.Basics.Units.Length width_plate=if flowOrientation==0 then width else length "Width of plate (orthogonal to flow direction)" annotation (Dialog(group="Essential Geometry Definition"));
  final parameter Real N_f = (integer(width / t_f) + 1) "Number of fins between two tubes" annotation (Dialog(group="Essential Geometry Definition"));
  final parameter ClaRa.Basics.Units.Area A_f=2*(length + s_f)*h_f*N_f*(N_tubes+1)*N_passes + A_l "Finned heat transfer area" annotation (Dialog(group="Essential Geometry Definition"));
  final parameter ClaRa.Basics.Units.Area A_ts=2*((width - s_f*N_f)*length + width*diameter_t)*(N_tubes+1)*N_passes "Tube side heat transfer area" annotation (Dialog(group="Essential Geometry Definition"));
  final parameter ClaRa.Basics.Units.Area A_l=2*(l_l*N_f*N_l*s_f)*(N_tubes+1)*N_passes "Louver cutting heat transfer area" annotation (Dialog(group="Essential Geometry Definition"));
  final parameter Integer N_l = if t_l <= 0 then 0 else integer(length/t_l) - 1 "Number of louvers alongside one fin" annotation (Dialog(group="Essential Geometry Definition"));

    annotation (Documentation(info="<html>
<p><b>For detailed model documentation please consult the html-documentation shipped with ClaRa.</b> </p>
<p>&nbsp;</p>
<p><br><b><span style=\"font-size: 10pt;\">Authorship and Copyright Statement for original (initial) Contribution</span></b></p>
<p><b>Author:</b> </p>
DYNCAP/DYNSTART development team, Copyright &copy; 2011-2022.</p>
<p><b>References:</b> </p>
<p> For references please consult the html-documentation shipped with ClaRa. </p>
<p><b>Remarks:</b> </p>
<p>This component was developed by ClaRa development team under the 3-clause BSD License.</p>
<b>Acknowledgements:</b>
<p>ClaRa originated from the collaborative research projects DYNCAP and DYNSTART. Both research projects were supported by the German Federal Ministry for Economic Affairs and Energy (FKZ 03ET2009 and FKZ 03ET7060).</p>
<p><b>CLA:</b> </p>
<p>The author(s) have agreed to ClaRa CLA, version 1.0. See <a href=\"https://claralib.com/pdf/CLA.pdf\">https://claralib.com/pdf/CLA.pdf</a></p>
<p>By agreeing to ClaRa CLA, version 1.0 the author has granted the ClaRa development team a permanent right to use and modify his initial contribution as well as to publish it or its modified versions under the 3-clause BSD License.</p>
<p>The ClaRa development team consists of the following partners:</p>
<p>TLK-Thermo GmbH (Braunschweig, Germany)</p>
<p>XRG Simulation GmbH (Hamburg, Germany).</p>
</html>",
revisions=
        "<html>
<body>
<p>For revisions please consult the html-documentation shipped with ClaRa.</p>
</body>
</html>"),
 Icon(graphics={Bitmap(
          extent={{-100,-100},{100,100}},
          imageSource="",
          fileName="modelica://ClaRa/Resources/Images/Components/FlatTubeFinnedGeometry.png")}));
end FlatTubeFinnedGeometry_N_cv;
