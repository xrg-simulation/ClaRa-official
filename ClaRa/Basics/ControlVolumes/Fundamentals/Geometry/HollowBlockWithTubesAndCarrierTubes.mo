within ClaRa.Basics.ControlVolumes.Fundamentals.Geometry;
model HollowBlockWithTubesAndCarrierTubes "Block shape || Shell with tubes || Carrier tubes"
//__________________________________________________________________________//
// Component of the ClaRa library, version: 1.8.1                           //
//                                                                          //
// Licensed by the ClaRa development team under the 3-clause BSD License.   //
// Copyright  2013-2023, ClaRa development team.                            //
//                                                                          //
// The ClaRa development team consists of the following partners:           //
// TLK-Thermo GmbH (Braunschweig, Germany),                                 //
// XRG Simulation GmbH (Hamburg, Germany).                                  //
//__________________________________________________________________________//
// Contents published in ClaRa have been contributed by different authors   //
// and institutions. Please see model documentation for detailed information//
// on original authorship and copyrights.                                   //
//__________________________________________________________________________//

  extends ClaRa.Basics.ControlVolumes.Fundamentals.Geometry.BlockShape;
  extends ClaRa.Basics.ControlVolumes.Fundamentals.Geometry.ShellWithTubes;
  extends ClaRa.Basics.ControlVolumes.Fundamentals.Geometry.GenericGeometry(
    final volume=width*height*length - Modelica.Constants.pi/4*diameter_t^2*length_tubes*N_tubes*N_passes - N_ct*d_ct^2*Modelica.Constants.pi/4*height,
    final N_heat=3,
    final A_heat={
            if flowOrientation == ClaRa.Basics.Choices.GeometryOrientation.vertical then
              if tubeOrientation==2 then 2*(width + length)*height
              else 2*(width + length)*height - 2*N_tubes*Modelica.Constants.pi*diameter_t^2/4
            else
              if tubeOrientation==0 then 2*(width + height)*length
              else 2*(width + height)*length - 2*N_tubes*Modelica.Constants.pi*diameter_t^2/4,
            Modelica.Constants.pi*diameter_t*length_tubes*N_tubes*N_passes,
            N_ct*Modelica.Constants.pi*d_ct*height},
    final A_cross=if (flowOrientation == ClaRa.Basics.Choices.GeometryOrientation.horizontal and tubeOrientation==0 or flowOrientation == ClaRa.Basics.Choices.GeometryOrientation.vertical and tubeOrientation==2) then A_front - Modelica.Constants.pi/4*diameter_t^2*N_tubes*N_passes else A_front*psi,
    final A_front=if flowOrientation == ClaRa.Basics.Choices.GeometryOrientation.horizontal then height*width else width*length,
    final A_hor=width*length*interior,
    height_fill=height,
    final shape=[0, 1; 1, 1]);
  // A_heat[1]=Lateral surface
  // A_heat[2]=Inner HT area
  // A_heat[3]= HT area of carrier tubes

  parameter Units.Length height=1 "Height of the component; Fixed flow direction in case of vertical flow orientation" annotation (Dialog(tab="General",group="Essential Geometry Definition"));
  parameter Units.Length width=1 "Width of the component" annotation (Dialog(tab="General",group="Essential Geometry Definition"));
  parameter Units.Length length=1 "Length of the component; Fixed flow direction in case of horizontal flow orientation" annotation (Dialog(
      tab="General",
      group="Essential Geometry Definition",
      showStartAttribute=false,
      groupImage="modelica://ClaRa/Resources/Images/ParameterDialog/HollowBlockWithTubesAndCarrierTubes.png",
      connectorSizing=false));

  parameter ClaRa.Basics.Choices.GeometryOrientation flowOrientation=ClaRa.Basics.Choices.GeometryOrientation.horizontal "|Essential Geometry Definition|Orientation of shell side flow";

  final parameter Real interior=volume/(height*width*length) "Void fraction in the shell";

  parameter Units.Length diameter_t=0.1 "Outer diameter of internal tubes" annotation (Dialog(
      tab="General",
      group="Interior Equipment",
      showStartAttribute=false,
      groupImage="modelica://ClaRa/Resources/Images/ParameterDialog/HEX_ParameterDialogTubes.png",
      connectorSizing=false));
  parameter Integer N_tubes=1 "Number of internal tubes for one pass" annotation(Dialog(group="Interior Equipment"));
  parameter Integer N_passes=1 "Number of passes of the internal tubes"
                                                                       annotation(Dialog(group="Interior Equipment"));
  parameter Integer N_ct=16 "Number of carrier tubes"
                                                     annotation(Dialog(group="Carrier Tubes"));
  parameter Units.Length d_ct=0.04 "Diameter of carrier tubes" annotation (Dialog(group="Carrier Tubes"));

  constant Real MIN=1e-5 "Limiter";
  parameter Units.Length Delta_z_par=2*diameter_t "Distance between tubes parallel to flow direction" annotation (Dialog(group="Interior Equipment"));
  parameter Units.Length Delta_z_ort=2*diameter_t "Distance between tubes orthogonal to flow direction" annotation (Dialog(group="Interior Equipment"));
  final parameter Real a=Delta_z_ort/diameter_t "Lateral alignment ratio"
                                                                         annotation(Dialog(group="Interior Equipment"));
  final parameter Real b=Delta_z_par/diameter_t "Vertical alignment ratio"
                                                                          annotation(Dialog(group="Interior Equipment"));
  final parameter Real psi=if b >= 1 or b<=0 then 1 - Modelica.Constants.pi/4/a else 1 - Modelica.Constants.pi/4/a/b "Void ratio"
                                                                                                                                 annotation(Dialog(group="Interior Equipment"));
  // b<=0 refers to single row case!
  parameter Boolean staggeredAlignment=true "True, if the tubes are aligned staggeredly, false otherwise"
                                                                                                         annotation(Dialog(group="Interior Equipment"));
  final parameter Real fa=if staggeredAlignment then (1 + (if b>0 then 2/3/b else 0)) else (1 + (if b>0 then 0.7/max(MIN,psi)^1.5*(b/a - 0.3)/(b/a + 0.7)^2 else 0)) "Alignment factor";

  parameter Integer N_rows(
    min=N_passes,
    max=N_tubes*N_passes) = integer(ceil(sqrt(N_tubes))*N_passes) "Number of pipe rows in flow direction (minimum = N_passes)" annotation(Dialog(group="Interior Equipment"));
      parameter Integer tubeOrientation=0 "Tube orientation" annotation (Dialog(group="Interior Equipment"), choices(
      choice=0 "Lengthwise",
      choice=1 "Widthwise",
      choice=2 "Heightwise"));
  final parameter Real N_tubes_parallel = N_tubes*N_passes/N_rows "Number of parallel tubes";
  final parameter Real length_tubes = if tubeOrientation==0 then length else if tubeOrientation==1 then width else height "Tube length";
  final parameter Real A_narrowed_ort = if flowOrientation == ClaRa.Basics.Choices.GeometryOrientation.vertical then
                                            if tubeOrientation==0 then length*width - N_tubes_parallel*diameter_t*length
                                            else if tubeOrientation==1 then length*width - N_tubes_parallel*diameter_t*width
                                            else 0
                                      else  if tubeOrientation==0 then 0
                                            else if tubeOrientation==1 then width*height - N_tubes_parallel*diameter_t*width
                                            else height*width - N_tubes_parallel*diameter_t*height "Narrowed cross section in parallel tube layer";


  final parameter Real A_narrowed_par = if flowOrientation == ClaRa.Basics.Choices.GeometryOrientation.vertical then
                                            if tubeOrientation==0 then length*height - N_rows*diameter_t*length
                                            else if tubeOrientation==1 then width*height - N_rows*diameter_t*width
                                            else 0
                                      else  if tubeOrientation==0 then 0
                                            else if tubeOrientation==1 then width*length - N_rows*diameter_t*width
                                            else height*length - N_rows*diameter_t*height "Narrowed cross section in tube row layer";

  final parameter Real length_bundle_par = N_rows*Delta_z_par;
  final parameter Real length_bundle_ort = N_tubes_parallel*Delta_z_ort;
  final parameter Real Delta_l_par= if flowOrientation == ClaRa.Basics.Choices.GeometryOrientation.vertical then
                                 if tubeOrientation==0 then height - length_bundle_par
                                 else if tubeOrientation==1 then height - length_bundle_par
                                 else 0
                              else
                                 if tubeOrientation==0 then 0
                                 else if tubeOrientation==1 then length - length_bundle_par
                                 else length - length_bundle_par;


  final parameter Real Delta_l_ort = if flowOrientation == ClaRa.Basics.Choices.GeometryOrientation.vertical then
                                 if tubeOrientation==0 then width - length_bundle_ort
                                 else if tubeOrientation==1 then length - length_bundle_ort
                                 else 0
                              else
                                 if tubeOrientation==0 then 0
                                 else if tubeOrientation==1 then height - length_bundle_ort
                                 else width - length_bundle_ort;
equation
  assert(psi>0, "Negative or zero psi leads to invalid Reynolds numbers. Check geometry values for pipe arrangement. Delta_z_par*delta_z_ort must be > pi*diameter_o^2/4.");
  assert(volume>0, "The volume of the shell side must be > 0 but is "+String(volume, significantDigits=3) + " in instance" + getInstanceName() + ".");
  assert(A_narrowed_ort>=0, "Number of parallel tubes too high. Check geometry values for pipe arrangement. A_narrowed_ort = " +String(A_narrowed_ort, significantDigits=3));
  assert(A_narrowed_par>=0, "Number of tube rows too high. Check geometry values for pipe arrangement. A_narrowed_par = "  +String(A_narrowed_par, significantDigits=3));
  assert(Delta_l_par>=0, "Tube bundle in flow direction larger than volume. Check geometry values for pipe arrangement. Delta_l_par = "  +String(Delta_l_par, significantDigits=3));
  assert(Delta_l_ort>=0, "Tube bundle orthogonal to flow direction larger than volume. Check geometry values for pipe arrangement. Delta_l_ort = "  +String(Delta_l_ort, significantDigits=3));

  annotation (Documentation(info="<html>
<p><b>For detailed model documentation please consult the html-documentation shipped with ClaRa.</b> </p>
<p>&nbsp;</p>
<p><br><b><span style=\"font-size: 10pt;\">Authorship and Copyright Statement for original (initial) Contribution</span></b></p>
<p><b>Author:</b> </p>
DYNCAP/DYNSTART development team, Copyright &copy; 2011-2023.</p>
<p><b>References:</b> </p>
<p> For references please consult the html-documentation shipped with ClaRa. </p>
<p><b>Remarks:</b> </p>
<p>This component was developed by ClaRa development team under the 3-clause BSD License.</p>
<b>Acknowledgements:</b>
<p>ClaRa originated from the collaborative research projects DYNCAP and DYNSTART. Both research projects were supported by the German Federal Ministry for Economic Affairs and Energy (FKZ 03ET2009 and FKZ 03ET7060).</p>
<p><b>CLA:</b> </p>
<p>The author(s) have agreed to ClaRa CLA, version 1.0. See <a href=\"https://claralib.com/pdf/CLA.pdf\">https://claralib.com/pdf/CLA.pdf</a></p>
<p>By agreeing to ClaRa CLA, version 1.0 the author has granted the ClaRa development team a permanent right to use and modify his initial contribution as well as to publish it or its modified versions under the 3-clause BSD License.</p>
<p>The ClaRa development team consists of the following partners:</p>
<p>TLK-Thermo GmbH (Braunschweig, Germany)</p>
<p>XRG Simulation GmbH (Hamburg, Germany).</p>
</html>",
revisions="<html>
<body>
<p>For revisions please consult the html-documentation shipped with ClaRa.</p>
</body>
</html>"),Dialog(enable=not parallelTubes), Icon(graphics={Bitmap(
          extent={{-100,-100},{100,100}},
          imageSource=
            "",
          fileName="modelica://ClaRa/Resources/Images/Components/HollowBlockWithTubes.png")}));
end HollowBlockWithTubesAndCarrierTubes;
