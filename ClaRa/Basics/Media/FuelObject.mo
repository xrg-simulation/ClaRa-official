within ClaRa.Basics.Media;
model FuelObject
   input ClaRa.Basics.Units.Pressure p "Pressure" annotation(Dialog);
   input ClaRa.Basics.Units.Temperature T "Temperature" annotation(Dialog);
   input ClaRa.Basics.Units.MassFraction xi_c[fuelModel.N_c - 1] "Composition" annotation (Dialog);
   parameter ClaRa.Basics.Media.FuelTypes.BaseFuel fuelModel = simCenter.fuelModel1 "Fuel type" annotation(choicesAllMatching);

   ClaRa.Basics.Units.DensityMassSpecific rho "Density";
   ClaRa.Basics.Units.HeatCapacityMassSpecific cp(stateSelect=StateSelect.never)  "Spec. heat capacity of fuel";
   ClaRa.Basics.Units.EnthalpyMassSpecific LHV  "Lower heating value";
   ClaRa.Basics.Units.EnthalpyMassSpecific h "Spec. enthalpy";

   ClaRa.Basics.Units.MassFraction xi_h2o "Water mass fraction";
   ClaRa.Basics.Units.MassFraction xi_ash "Ash mass fraction";
   ClaRa.Basics.Units.Temperature T_ref = fuelModel.T_ref "Reference temperature";
   ClaRa.Basics.Units.MassFraction xi_e[fuelModel.N_e - 1] "Mass fraction of elements";
   outer ClaRa.SimCenter simCenter;
equation
  //    assert(sum(xi)<=1, "Sum of species fraction must be <=1 but is " + String(sum(xi)) + " in component " + getInstanceName());
   rho = ClaRa.Basics.Media.FuelFunctions.density_pTxi(
     p,
     T,
     xi_c,
     fuelModel) "Density";
   cp = ClaRa.Basics.Media.FuelFunctions.heatCapacity_pTxi(
     p,
     T,
     xi_c,
     fuelModel) "Spec. heat capacity of fuel";
   LHV = ClaRa.Basics.Media.FuelFunctions.LHV_pTxi(
     p,
     T,
     xi_c,
     fuelModel) "Lower heating value";
   h = ClaRa.Basics.Media.FuelFunctions.enthalpy_pTxi(
     p,
     T,
     xi_c,
     fuelModel) "Spec. enthalpy";

   xi_h2o = ClaRa.Basics.Media.FuelFunctions.waterMassFraction_xi(xi_c, fuelModel);
   xi_ash = ClaRa.Basics.Media.FuelFunctions.ashMassFraction_xi(xi_c, fuelModel);
      for i in 1:fuelModel.N_e-1 loop
        xi_e[i] = ClaRa.Basics.Media.FuelFunctions.massFraction_i_xi(xi_c, i, fuelModel);
      end for;

  annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={Bitmap(
          extent={{-80,-60},{80,100}},
          imageSource="",
          fileName="modelica://ClaRa/figures/Components/FuelObject.png"), Text(
          extent={{-100,-60},{100,-100}},
          lineColor={27,36,42},
          textString="%name"),
        Ellipse(
          extent={{-80,100},{80,-60}},
          lineColor={118,124,127},
          lineThickness=0.5)}),                                  Diagram(coordinateSystem(preserveAspectRatio=false)));
end FuelObject;
